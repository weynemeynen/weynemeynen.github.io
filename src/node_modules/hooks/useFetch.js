import { useState, useEffect, useCallback } from 'react'
import axios from 'axios'

export default function useFetch(url) {
  const baseUrl = 'https://api.github.com'
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)
  const [response, setResponse] = useState([])
  const [options, setOptions] = useState({})

  const doFetch = useCallback((options = {}) => {
    setOptions(options);
    setIsLoading(true);
  }, [])

  useEffect(() => {
    let skipGetResponseAfterDestroy = false
    if (!isLoading) return

    // fetch
    // fetch(baseUrl + url, options)
    //   .then((response) => {
    //     setIsLoading(false)

    //     // return response.json()
    //   })
    //   .then((data => {
    //     console.log('success', data)
    //     setResponse(data)
    //   }
    //   ))
    // // .catch((error) => {
    // //   console.log('ошибка запроса', error)
    // //   console.log('dummy-данные', error)
    // //   setIsLoading(false)
    // //   setResponse(user()[0])
    // //   // setError(error.response.data)
    // // })

    // xhr
    axios(baseUrl + url, options)
      .then((result) => {
        !skipGetResponseAfterDestroy && setIsLoading(false)
        !skipGetResponseAfterDestroy && setResponse(result.data)
        // или
        // if (!skipGetResponseAfterDestroy) {
        //   setIsLoading(false)
        //   setResponse(result.data)
        // }
      })
      .catch((error) => {
        if (!skipGetResponseAfterDestroy) {
          console.log('ошибка запроса', error)
          setIsLoading(false)
          setError(error.response.data)
        }
      })

    return () => skipGetResponseAfterDestroy = true

  }, [isLoading, options, url])

  return [{ response, isLoading, error }, doFetch]
}