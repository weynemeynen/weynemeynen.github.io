import React, { useContext, useEffect } from 'react'

import { ThemeContext, LIGHT, DARK } from 'contexts'
import useFetch from 'hooks/useFetch'
import Spacer from 'components/Spacer'
import Person from 'components/Person'
import Repo from 'components/Repo'
import Toggler from 'components/Toggler'
import Loading from 'components/Loading'
import ErrorMessage from 'components/ErrorMessage'
import { useHistory, useParams, Redirect } from 'react-router-dom'

export default function RepoPage() {
  const history = useHistory();
  const { repo: repoName } = useParams()

  const [theme,] = useContext(ThemeContext)

  const apiUrl = `/repos/weynemeynen/${repoName}` // на конкретный репозиторий
  const [{ response, isLoading, error }, doFetch] = useFetch(apiUrl)

  useEffect(() => {
    console.log('repo from RepoPage:', repoName)
    doFetch()
  }, [doFetch, repoName])

  const textColor = theme === DARK ? LIGHT : DARK

  return (
    <React.Fragment>
      <Spacer />
      <div className={`container flex-grow-1 mt-4 mt-sm-0 text-${textColor}`}>
        <div className="row">
          <div className="col-sm-3" itemScope itemType="http://schema.org/Person">
            {isLoading && <Loading />}
            {error && <ErrorMessage />}
            {!isLoading && response && (
              <Person />
            )}
          </div>
          <div className="col-sm-9">
            <Toggler />
            {isLoading && <div>...loading</div>}
            {error && <div>Ошибка</div>}
            {!isLoading && response && (
              <Repo repoName={response.name} history={history} redirect={Redirect} />
            )}
          </div>
        </div>
      </div>
    </React.Fragment>
  )
}