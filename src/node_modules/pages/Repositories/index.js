import React, { useContext, useEffect, useRef, useState } from 'react'

// import { stringify } from 'query-string'

import { ThemeContext, LIGHT, DARK } from 'contexts'
import useFetch from 'hooks/useFetch'
import Spacer from 'components/Spacer'
import Person from 'components/Person'
import Repos from 'components/Repos'
import Toggler from 'components/Toggler'
import Loading from 'components/Loading'
import ErrorMessage from 'components/ErrorMessage'
import Search from 'components/Search'
import Details from 'plugins/plugin-details'

// import Pagination from 'components/Pagination'
// import { getPaginator, limit } from 'utils'


export default function Repositories(/*{ location, match }*/) {
  const [theme,] = useContext(ThemeContext)
  const apiUrl = `/users/weynemeynen/repos`
  const [{ response, isLoading, error }, doFetch] = useFetch(apiUrl)
  const [term, setTerm] = useState('')
  const refDetails = useRef(null)
  const [selected, setSelected] = useState('')
  console.log(selected)

  // const url = match.url
  // const { offset, currentPage } = getPaginator(location.search)
  // const stringifiedParams = stringify({
  //   limit,
  //   offset
  // })

  useEffect(() => {
    const details = new Details(refDetails.current, {
      placeholder: 'нужно что-нибудь выбрать',
      data: [
        { id: '0', value: 'React' },
        { id: '1', value: 'Vue' },
        { id: '2', value: 'Angular' }
      ],
      selectedValue: 'Vue',
      onSelect(item) {
        setSelected(item.value)
      }
    })
    details.select('React');
  }, [])

  useEffect(() => {
    doFetch()
  }, [doFetch /*, currentPage */])

  function search(items, term) {
    if (term === '') {
      return items
    }
    return items.filter(item => {
      return item.name.toLowerCase().indexOf(term.toLowerCase()) > -1
    })
  }

  const repos = response.filter(repo => repo.name !== 'weynemeynen.github.io')
  const visibleItems = search(repos, term)

  const handlerSearchTerm = (event) => {
    setTerm(event.target.value)
  }

  let textColor = theme === DARK ? LIGHT : DARK
  let borderColor = theme === DARK ? 'border-secondary' : ''

  return <React.Fragment>
    <Spacer />
    <div className={`container flex-grow-1 mt-4 mt-sm-0 text-${textColor}`}>
      <div className="row">
        <div className="col-sm-3">
          {isLoading && <Loading />}
          {error && <ErrorMessage />}
          {!isLoading && response && (
            <Person />
          )}
        </div>
        <div className="col-sm-9">
          <Toggler reposCount={repos.length} />
          <form className={`d-flex py-3 border-bottom ${borderColor}`} onSubmit={(e) => e.preventDefault()}>
            <fieldset className='flex-grow-1 me-3'>
              <Search term={term} handlerSearchTerm={handlerSearchTerm} />
            </fieldset>
            <details ref={refDetails} />
          </form>
          {isLoading && <Loading />}
          {error && <ErrorMessage />}
          {!isLoading && response && (
            <React.Fragment>
              <Repos repos={visibleItems} />
              {/* <Pagination total={response.length} limit={limit} url={url} currentPage={currentPage} /> */}
            </React.Fragment>
          )}
        </div>
      </div>
    </div>
  </React.Fragment>
}
