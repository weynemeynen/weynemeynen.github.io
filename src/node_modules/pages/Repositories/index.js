import React, { useContext, useEffect } from 'react'
import { stringify } from 'query-string'

import { ThemeContext, LIGHT, DARK } from 'contexts'
import useFetch from 'hooks/useFetch'
import Spacer from 'components/Spacer'
import Person from 'components/Person'
import Repos from 'components/Repos'
// import Pagination from 'components/Pagination'
import Toggler from 'components/Toggler'
import Loading from 'components/Loading'
import ErrorMessage from 'components/ErrorMessage'
import { getPaginator, limit } from 'utils'

export default function Repositories({ location, match }) {
  const [theme,] = useContext(ThemeContext)
  const url = match.url
  const { offset, currentPage } = getPaginator(location.search)
  const stringifiedParams = stringify({
    limit,
    offset
  })
  const apiUrl = `/users/weynemeynen/repos?${stringifiedParams}`
  const [{ response, isLoading, error }, doFetch] = useFetch(apiUrl)

  useEffect(() => {
    doFetch()
  }, [doFetch, currentPage])

  const textColor = theme === DARK ? LIGHT : DARK

  return (
    <React.Fragment>
      <Spacer />
      <div className={`container flex-grow-1 mt-4 mt-sm-0 text-${textColor}`}>
        <div className="row">
          <div className="col-sm-3" itemScope itemType="http://schema.org/Person">
            {isLoading && <Loading />}
            {error && <ErrorMessage />}
            {!isLoading && response && (
              <Person />
            )}
          </div>
          <div className="col-sm-9">
            <Toggler reposCount={response.length} />
            {isLoading && <div>...loading</div>}
            {error && <div>Ошибка</div>}
            {!isLoading && response && (
              <React.Fragment>
                <Repos repos={response} />
                {/* <Pagination total={response.length} limit={limit} url={url} currentPage={currentPage} /> */}
              </React.Fragment>
            )}
          </div>
        </div>
      </div>
    </React.Fragment>
  )
}