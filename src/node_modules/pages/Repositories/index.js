import React, { useContext, useEffect, useState } from 'react'

// import { stringify } from 'query-string'

import { ThemeContext, LIGHT, DARK } from 'contexts'
import useFetch from 'hooks/useFetch'
import Spacer from 'components/Spacer'
import Person from 'components/Person'
import Repos from 'components/Repos'
import Toggler from 'components/Toggler'
import Loading from 'components/Loading'
import ErrorMessage from 'components/ErrorMessage'
import FilterPanel from 'components/FilterPanel'

// import Pagination from 'components/Pagination'
// import { getPaginator, limit } from 'utils'

export default function Repositories(/*{ location, match }*/) {
  const [theme,] = useContext(ThemeContext)
  const apiUrl = `/users/weynemeynen/repos`
  const [{ response, isLoading, error }, doFetch] = useFetch(apiUrl)
  const [term, setTerm] = useState('')
  const [language, setLanguage] = useState('All')

  // console.log(props)
  // const url = match.url
  // const { offset, currentPage } = getPaginator(location.search)
  // const stringifiedParams = stringify({
  //   limit,
  //   offset
  // })

  useEffect(() => {
    doFetch()
  }, [doFetch /*, currentPage */])

  const handlerSearchTerm = (event) => {
    setTerm(event.target.value)
  }
  function onFilter(filter) {
    setLanguage(filter)
  }
  function search(items, term) {
    if (term === '') {
      return items
    }
    return items.filter(item => {
      return item.name.toLowerCase().indexOf(term.toLowerCase()) > -1
    })
  }
  function filter(repos, language) {
    switch (language) {
      case 'All':
        return repos
      case 'HTML':
        return repos.filter(repo => repo.language === 'HTML')
      case 'JavaScript':
        return repos.filter(repo => repo.language === 'JavaScript')
      case 'CSS':
        return repos.filter(repo => repo.language === 'CSS')
      default: return repos
    }
  }

  // исключить repo
  const repos = response.filter(repo => repo.name !== 'weynemeynen.github.io')
  // отфильтрованный (видимый) repos-список
  const visibleItems = filter(search(repos, term), language)
  // все используемые уникальные языки
  const setLanguages = new Set(repos.map(lang => lang.language))
  let languages = Array.from(setLanguages.add('All'))
  // let languages = ['All', 'JavaScript', 'HTML', 'CSS']

  let textColor = theme === DARK ? LIGHT : DARK

  return <React.Fragment>
    <Spacer />
    <div className={`container flex-grow-1 mt-4 mt-sm-0 text-${textColor}`}>
      <div className="row">
        <div className="col-sm-3">
          {isLoading && <Loading />}
          {error && <ErrorMessage />}
          {!isLoading && response && (
            <Person />
          )}
        </div>
        <div className="col-sm-9">
          <Toggler reposCount={repos.length} />
          <FilterPanel
            term={term}
            handlerSearchTerm={handlerSearchTerm}
            language={language}
            languages={languages}
            onFilter={onFilter} />
          {isLoading && <Loading />}
          {error && <ErrorMessage />}
          {!isLoading && response && (
            <React.Fragment>
              <Repos repos={visibleItems} />
              {/* <Pagination total={response.length} limit={limit} url={url} currentPage={currentPage} /> */}
            </React.Fragment>
          )}
        </div>
      </div>
    </div>
  </React.Fragment>
}
