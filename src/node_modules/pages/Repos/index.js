import React, { useContext, useEffect } from 'react'

import { ThemeContext, LIGHT, DARK } from 'contexts'
import useFetch from 'hooks/useFetch'

import Person from 'components/Person'
import Repo from 'components/Repo'
import Toggler from 'components/Toggler'
import Loading from 'components/Loading'
import ErrorMessage from 'components/ErrorMessage'


export default function Repos({ location, match }) {
  const [theme,] = useContext(ThemeContext)

  const repoName = match.params.name
  const apiUrl = `/repos/weynemeynen/${repoName}` // на конкретный репозиторий
  const [{ response, isLoading, error }, doFetch] = useFetch(apiUrl)

  useEffect(() => {
    doFetch()
  }, [doFetch, repoName])

  const textColor = theme === DARK ? LIGHT : DARK
  const borderColor = theme === DARK ? 'border-secondary' : ''

  return (
    <React.Fragment>
      <div className={`mt-5 pb-4 border-bottom d-none d-sm-block ${borderColor}`} style={{ marginBottom: '-43px' }} />
      <div className={`container flex-grow-1 mt-4 mt-sm-0 text-${textColor}`}>
        <div className="row">
          <div className="col-sm-3" itemScope itemType="http://schema.org/Person">
            {isLoading && <Loading />}
            {error && <ErrorMessage />}
            {!isLoading && response && (
              <Person />
            )}
          </div>
          <div className="col-sm-9">
            <Toggler repoName={repoName} />
            {isLoading && <div>...loading</div>}
            {error && <div>Ошибка</div>}
            {!isLoading && response && (
              <Repo repo={response} />
            )}
          </div>
        </div>
      </div>
    </React.Fragment>
  )
}