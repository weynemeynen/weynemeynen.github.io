import React, { useContext, useEffect } from 'react'
import { stringify } from 'query-string'

import { ThemeContext } from 'contexts'
import { useFetch } from 'hooks/useFetch'

import Person from 'components/Person'
import ReposList from 'components/ReposList'
import Pagination from 'components/Pagination'
import Toggler from 'components/Toggler'
import Loading from 'components/Loading'
import ErrorMessage from 'components/ErrorMessage'
import { getPaginator, limit } from 'utils'

export default function Home({ location, match }) {

  const url = match.url
  const { offset, currentPage } = getPaginator(location.search)
  const stringifiedParams = stringify({
    limit,
    offset
  })
  const apiUrl = `/users/weynemeynen/repos?${stringifiedParams}`
  const [{ response, isLoading, error }, doFetch] = useFetch(apiUrl)

  useEffect(() => {
    doFetch()
  }, [doFetch, currentPage])

  const [theme,] = useContext(ThemeContext)
  const textColor = theme === 'dark' ? 'light' : 'dark'
  const borderColor = theme === 'dark' ? 'border-secondary' : ''

  return (
    <React.Fragment>
      <div className={`mt-5 pb-4 border-bottom d-none d-sm-block ${borderColor}`} style={{ marginBottom: '-38px' }} />
      <div className={`container flex-grow-1 px-lg-5 mt-5 mt-sm-0 text-${textColor}`}>
        <div className="row mx-lg-5 px-lg-5">
          <div className="col-sm-4 col-md-3 mt-0" itemScope itemType="http://schema.org/Person">
            {isLoading && <Loading />}
            {error && <ErrorMessage />}
            {!isLoading && response && (
              <Person />
            )}
          </div>
          <div className="col-sm-8 col-md-9 mt-0">
            <Toggler />
            {isLoading && <div>...loading</div>}
            {error && <div>Ошибка</div>}
            {!isLoading && response && (
              <React.Fragment>
                <ReposList repos={response} />
                <Pagination total={response.length} limit={limit} url={url} currentPage={currentPage} />
              </React.Fragment>
            )}
          </div>
        </div>
      </div>
    </React.Fragment>
  )
}